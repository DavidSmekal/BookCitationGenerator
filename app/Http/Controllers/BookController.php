<?php

namespace App\Http\Controllers;
use Illuminate\Support\Facades\DB;
use Illuminate\Http\RedirectResponse;
use Illuminate\Support\Facades\Session;

use Request;

use App\Book;
use App\bookcollection;

class BookController extends Controller
{
     public function create()
    {
    	
    	return view('/books/addbook');

    }

    public function store()

    {

    	// Create a new book using the request data
    	//Save it to the database
        //dont need to save the token generated by csfr
        $input =Request::except('_token');
        //extract only the values that are attributes in the books table
        $inputOnly =Request::intersect(['title','codeNum','authorLastName','authorFirstName','illustratorFirstName','illustratorLastName','translatorFirstName','translatorLastName','publisher','copyright','isbn','createdBy']);

        // removes all keys with values of null!
        $rm_null = array_filter( $input, 'strlen' );
        
        //need to stringify array
        $arr_tojson = json_encode($rm_null);

        $arr2_tojson = json_encode($input);

        //insert the json fields into the dtabase and return the Id of that insertion

        $id = DB::table('books')->insertGetId(['bookAttr'=>$arr_tojson,'fields'=>$arr_tojson]);
        //use that id to update the other fields corresponding to the same row.
        DB::table('books')
            ->where('id', $id)
            ->update($inputOnly);


        return view('/books/addbook');

    }
    


   
    public function edit($id)
    {   
        $books = DB::table('books')->select('bookAttr')->where('id', '=', $id)->get();
        

        $bookat = $books[0]->bookAttr;

        $book= json_decode($bookat);
       
        $del =$id;
        
        



        

        return view('/books/edit',compact('book','del'));
    }

    // this function updates books in the database
    public function update($id) {



           // DB::table('books')->where('id', '=', $id)->delete();


        // Getting the data from HTTP request


            // Create a new book using the request data
        //Save it to the database
        //dont need to save the token generated by csfr
        $input = Request::except('_token');
        //extract only the values that are attributes in the books table
        $inputOnly = Request::intersect(['title','codeNum','authorLastName','authorFirstName','illustratorFirstName','illustratorLastName','translatorFirstName','translatorLastName','publisher','copyright','isbn','createdBy']);

        // removes all keys with values of null!
        $rm_null = array_filter( $input, 'strlen' );
        
        //need to stringify array
        $arr_tojson = json_encode($rm_null);

        $arr2_tojson = json_encode($input);

        //insert the json fields into the database and return the Id of that insertion

        DB::table('books')
            ->where('id', $id)
            ->update(['bookAttr'=>$arr_tojson, 'fields'=>$arr_tojson]);



        //use that id to update the other fields corresponding to the same row.
        DB::table('books')
            ->where('id', $id)
            ->update($inputOnly);

        Session::flash('message', 'Successfully updated book!');
       return redirect('/home');

    }
    /*This works it just looks weird with all the books because it uses route model binding.*/
   public function destroy($id)
    {
        $bookcol = Book::find($id);
        $bookcol->delete();
        Session::flash('message', 'Book successfully deleted collection!');

        return redirect('/home');
    }


    public function show($id){
        $books = DB::table('books')->select('bookAttr')->where('id', '=', $id)->get();
        

        $bookat = $books[0]->bookAttr;

        $books= json_decode($bookat);

       
        
        
        return view('/books/show', compact('books'));
    }


}

